---
argo-cd:
  applicationSet:
    replicas: 2
    resources:
      requests:
        cpu: "50m"
        memory: "32Mi"
      limits:
        memory: "1Gi"
    livenessProbe:
      enabled: true
    readinessProbe:
      enabled: true
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  configs:
    params:
      # by default argocd handles SSL termination on its own, which breaks TLS termination on nginx,
      # causing infinite loop
      "server.insecure": true
    repositories:
      deedee-ops-home-ops:
        name: home-ops
        type: git
        url: https://github.com/ajgon/home-test.git
    cm:
      # this customization make sync-waves work properly
      resource.customizations: |
        argoproj.io/Application:
          health.lua: |
            hs = {}
            hs.status = "Progressing"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                hs.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  hs.message = obj.status.health.message
                end
              end
            end
            return hs
      resource.exclusions: |
        - apiGroups:
          - cilium.io
          kinds:
          - CiliumIdentity
          clusters:
          - "*"
        - apiGroups:
          - actions.github.com
          kinds:
          - AutoscalingListener
          clusters:
          - "*"
    rbac:
      policy.csv: g, lldap_admin, role:admin
  controller:
    replicas: 2
    resources:
      requests:
        cpu: "50m"
        memory: "256Mi"
      limits:
        memory: "4Gi"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  dex:
    enabled: false
  global:
    deploymentStrategy:
      type: RollingUpdate
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      runAsGroup: 999
      seccompProfile:
        type: RuntimeDefault
  nameOverride: argo-cd
  notifications:
    enabled: false
  redis:
    enabled: true
    serviceAccount:
      create: true
    livenessProbe:
      enabled: true
    readinessProbe:
      enabled: true
    resources:
      requests:
        cpu: "50m"
        memory: "32Mi"
      limits:
        memory: "1Gi"
    exporter:
      enabled: true
      resources:
        requests:
          cpu: "50m"
          memory: "32Mi"
        limits:
          memory: "1Gi"
      livenessProbe:
        enabled: true
      readinessProbe:
        enabled: true
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  repoServer:
    replicas: 2
    resources:
      requests:
        cpu: "50m"
        memory: "64Mi"
      limits:
        memory: "1Gi"
    podLabels:
      # for downloading helm charts from various sources
      egress/enabled: "true"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  server:
    replicas: 2
    resources:
      requests:
        cpu: "50m"
        memory: "64Mi"
      limits:
        memory: "1Gi"
    ingress:
      enabled: true
      ingressClassName: internal
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
